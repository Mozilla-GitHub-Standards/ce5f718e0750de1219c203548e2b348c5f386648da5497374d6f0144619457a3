AWSTemplateFormatVersion: "2010-09-09"
Description: "OIDCAccessProxy"
Mappings:
  dev:
      us-west-2:
        AMI: ami-5bc13c23
        CertificateARN: "arn:aws:acm:us-west-2:656532927350:certificate/93b81548-c28d-4912-b621-fc6cc6b52274"
  prod:
      us-west-2:
        AMI: ami-5bc13c23
        CertificateARN: ""
Parameters:
  SSHKeyName:
    Description: Name of the existing ssh key that should have access
    Type: String
    MinLength: "1"
    Default: akrug-key
  EnvType:
    Description: Environment type.
    Default: dev
    Type: String
    AllowedValues:
      - prod
      - dev
Conditions:
  UseProdCondition:
    !Equals [!Ref EnvType, prod]
  UseDevCondition:
    !Equals [!Ref EnvType, dev]
Resources:
  OIDCAccessProxyInternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: Name
          Value: OIDCAccessProxy
  OIDCAccessProxyVPC:
    Type: "AWS::EC2::VPC"
    DependsOn: OIDCAccessProxyInternetGateway
    Properties:
      CidrBlock: "10.0.0.0/16"
      EnableDnsSupport: True
      EnableDnsHostnames: True
      Tags:
        - Key: Name
          Value: OIDCAccessProxy
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn: OIDCAccessProxyVPC
    Properties:
      VpcId:
        Ref: OIDCAccessProxyVPC
      InternetGatewayId:
        Ref: OIDCAccessProxyInternetGateway
  OIDCAccessProxyRouteTable:
    Type: "AWS::EC2::RouteTable"
    DependsOn: [ OIDCAccessProxyVPC, OIDCAccessProxyInternetGateway, AttachGateway ]
    Properties:
      VpcId:
        Ref: OIDCAccessProxyVPC
      Tags:
        - Key: Name
          Value: OIDCAccessProxy
  OIDCAccessProxyDefaultRoute:
    Type: AWS::EC2::Route
    DependsOn: OIDCAccessProxyInternetGateway
    Properties:
      RouteTableId:
        Ref: OIDCAccessProxyRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: OIDCAccessProxyInternetGateway
  OIDCAccessProxySubnet1:
    Type: "AWS::EC2::Subnet"
    DependsOn: OIDCAccessProxyRouteTable
    Properties:
      AvailabilityZone: "us-west-2a"
      CidrBlock: "10.0.0.0/24"
      MapPublicIpOnLaunch: True
      VpcId:
        Ref: OIDCAccessProxyVPC
      Tags:
        - Key: Name
          Value: OIDCAccessProxy Subnet 1
  OIDCAccessProxySubnet2:
    Type: "AWS::EC2::Subnet"
    DependsOn: OIDCAccessProxyRouteTable
    Properties:
      AvailabilityZone: "us-west-2b"
      CidrBlock: "10.0.1.0/24"
      MapPublicIpOnLaunch: True
      VpcId:
        Ref: OIDCAccessProxyVPC
      Tags:
        - Key: Name
          Value: OIDCAccessProxy Subnet 2
  OIDCAccessProxySubnet3:
    Type: "AWS::EC2::Subnet"
    DependsOn: OIDCAccessProxyRouteTable
    Properties:
      AvailabilityZone: "us-west-2c"
      CidrBlock: "10.0.2.0/24"
      MapPublicIpOnLaunch: True
      VpcId:
        Ref: OIDCAccessProxyVPC
      Tags:
        - Key: Name
          Value: OIDCAccessProxy Subnet 3
  OIDCAccessProxyRouteAssoc1:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    DependsOn: OIDCAccessProxyDefaultRoute
    Properties:
      RouteTableId:
        Ref: OIDCAccessProxyRouteTable
      SubnetId:
        Ref: OIDCAccessProxySubnet1
  OIDCAccessProxyRouteAssoc2:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    DependsOn: OIDCAccessProxyDefaultRoute
    Properties:
      RouteTableId:
        Ref: OIDCAccessProxyRouteTable
      SubnetId:
        Ref: OIDCAccessProxySubnet2
  OIDCAccessProxyRouteAssoc3:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    DependsOn: OIDCAccessProxyDefaultRoute
    Properties:
      RouteTableId:
        Ref: OIDCAccessProxyRouteTable
      SubnetId:
        Ref: OIDCAccessProxySubnet3
  OIDCAccessProxySecGroup:
    Type: "AWS::EC2::SecurityGroup"
    DependsOn: OIDCAccessProxyVPC
    Properties:
      GroupDescription: "Allows ports to web instances of OIDCAccessProxy from ELB."
      VpcId:
        Ref: OIDCAccessProxyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 10.0.0.0/8
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: OIDCAccessProxy
  OIDCAccessProxyELBSecGroup:
    Type: "AWS::EC2::SecurityGroup"
    DependsOn: OIDCAccessProxyVPC
    Properties:
      GroupDescription: "Allows access to the ELB listeners."
      VpcId:
        Ref: OIDCAccessProxyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: OIDCAccessProxy ELB
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: OIDCAccessProxyELBSecGroup
    Properties:
      Scheme: internet-facing
      Subnets:
        - Ref: OIDCAccessProxySubnet1
        - Ref: OIDCAccessProxySubnet2
        - Ref: OIDCAccessProxySubnet3
      SecurityGroups:
        - Ref: OIDCAccessProxyELBSecGroup
      Tags:
        - Key: Name
          Value: OIDCAccessProxy
  ALBHTTPListener:
    Type : AWS::ElasticLoadBalancingV2::Listener
    DependsOn: ApplicationLoadBalancer
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: ALBTargetGroup
      LoadBalancerArn:
        Ref: ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
  ALBHTTPSListener:
    Type : AWS::ElasticLoadBalancingV2::Listener
    DependsOn: ApplicationLoadBalancer
    Properties:
      Certificates:
        - CertificateArn: !FindInMap [!Ref EnvType, !Ref "AWS::Region", CertificateARN]
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: ALBTargetGroup
      LoadBalancerArn:
        Ref: ApplicationLoadBalancer
      Port: 443
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-2016-08
  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: ApplicationLoadBalancer
    Properties:
      HealthyThresholdCount: 2
      HealthCheckIntervalSeconds: 10
      UnhealthyThresholdCount: 2
      HealthCheckPath: /health
      HealthCheckPort: 80
      Name: OIDCAccessProxyHTTPs
      Port: 80
      Protocol: HTTP
      VpcId:
        Ref: OIDCAccessProxyVPC
      Tags:
        - Key: Name
          Value: OIDCAccessProxy
  ALBTargetGroup1:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: ApplicationLoadBalancer
    Properties:
      HealthyThresholdCount: 2
      HealthCheckIntervalSeconds: 10
      UnhealthyThresholdCount: 2
      HealthCheckPath: /health
      HealthCheckPort: 80
      Name: OIDCAccessProxyHTTP
      Port: 80
      Protocol: HTTP
      VpcId:
        Ref: OIDCAccessProxyVPC
      Tags:
        - Key: Name
          Value: OIDCAccessProxy
  OIDCAccessProxyLaunchConfigProd:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Condition: UseProdCondition
    Properties:
      KeyName: !Ref SSHKeyName
      ImageId: !FindInMap [!Ref EnvType, !Ref "AWS::Region", AMI]
      IamInstanceProfile: "OIDCAccessProxy-instance-profile"
      UserData:
        Fn::Base64: !Sub |
          #cloud-config
          repo_update: true
          repo_upgrade: all
          runcmd:
            - REGION=$(curl 169.254.169.254/latest/meta-data/placement/availability-zone/ | sed 's/[a-z]$//')
            - yum update -y
            - yum install ruby wget make -y
            - cd /home/ec2-user
            - pip install boto3 --upgrade
            - wget https://aws-codedeploy-$REGION.s3.amazonaws.com/latest/install
            - chmod +x ./install
            - ./install auto
            - aws ecr get-login --region us-west-2 | bash
            - docker run -d -e SQS_QUEUE=OIDCAccessProxy-fluentd-sqs -v /var/log:/var/log 656532927350.dkr.ecr.us-west-2.amazonaws.com/sqs-fluentd:latest td-agent -c /etc/td-agent/td-agent.conf
            - mkdir /home/ec2-user/app
            - cd /home/ec2-user/app
            - git clone https://github.com/mozilla-iam/mozilla.oidc.accessproxy git
            - git checkout production
            - cd /home/ec2-user/app/git/
            - make compose-production
      SecurityGroups:
        - Ref: OIDCAccessProxySecGroup
      InstanceType: "t2.medium"
  OIDCAccessProxyLaunchConfigDev:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Condition: UseDevCondition
    DependsOn: [ OIDCAccessProxySubnet1, OIDCAccessProxySubnet2, OIDCAccessProxySubnet3 ]
    Properties:
      KeyName: !Ref SSHKeyName
      ImageId: !FindInMap [!Ref EnvType, !Ref "AWS::Region", AMI]
      IamInstanceProfile: "OIDCAccessProxy-instance-profile"
      UserData:
        Fn::Base64: !Sub |
          #cloud-config
          repo_update: true
          repo_upgrade: all
          runcmd:
            - REGION=$(curl 169.254.169.254/latest/meta-data/placement/availability-zone/ | sed 's/[a-z]$//')
            - yum update -y
            - yum install ruby wget make -y
            - cd /home/ec2-user
            - pip install boto3 --upgrade
            - wget https://aws-codedeploy-$REGION.s3.amazonaws.com/latest/install
            - chmod +x ./install
            - ./install auto
            - aws ecr get-login --region us-west-2 | bash
            - docker run -d -e SQS_QUEUE=OIDCAccessProxy-fluentd-sqs -v /var/log:/var/log 656532927350.dkr.ecr.us-west-2.amazonaws.com/sqs-fluentd:latest td-agent -c /etc/td-agent/td-agent.conf
            - mkdir /home/ec2-user/app
            - cd /home/ec2-user/app
            - git clone https://github.com/mozilla-iam/mozilla.oidc.accessproxy git
            - cd /home/ec2-user/app/git
            - make compose-staging
      SecurityGroups:
        - Ref: OIDCAccessProxySecGroup
      InstanceType: "t2.medium"
  HTTPsListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn:
          Ref: ALBTargetGroup1
      Conditions:
      - Field: path-pattern
        Values:
        - "*"
      ListenerArn:
        Ref: ALBHTTPSListener
      Priority: 1
  HTTPListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn:
          Ref: ALBTargetGroup1
      Conditions:
      - Field: path-pattern
        Values:
        - "*"
      ListenerArn:
        Ref: ALBHTTPListener
      Priority: 1
  OIDCAccessProxyASG:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    DependsOn: [ OIDCAccessProxySubnet1, OIDCAccessProxySubnet2, OIDCAccessProxySubnet3 ]
    Properties:
      Tags:
        -
          Key: Application
          Value: OIDCAccessProxy
          PropagateAtLaunch: true
        -
          Key: Name
          Value: OIDCAccessProxy-Worker
          PropagateAtLaunch: true
      TargetGroupARNs:
         - Ref: ALBTargetGroup
         - Ref: ALBTargetGroup1
      MaxSize: "5"
      MinSize: "3"
      VPCZoneIdentifier:
        - Ref: OIDCAccessProxySubnet1
        - Ref: OIDCAccessProxySubnet2
        - Ref: OIDCAccessProxySubnet3
      LaunchConfigurationName:
        !If [UseProdCondition, Ref: OIDCAccessProxyLaunchConfigProd, Ref: OIDCAccessProxyLaunchConfigDev]
